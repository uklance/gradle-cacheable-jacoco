import org.gradle.api.tasks.testing.*

apply plugin: 'java'

dependencies {
	compile 'ch.qos.logback:logback-classic:1.2.3'
	testCompile 'junit:junit:4.12'
}

test {
	enabled = false
}

(0..gradle.settings.testShardCount-1).each { shardIndex ->
	project(":test-shard-${shardIndex}") {
		apply plugin: 'java'
		apply plugin: 'jacoco'
		
		dependencies {
			testRuntime project(':all-tests').sourceSets.test.runtimeClasspath
		}
		
		testClasses {
			dependsOn ':all-tests:testClasses'
		}
		
		test {
			ext.includedTests = new TreeSet()
			jacoco {
				append = false
			}
			testClassesDirs = project(':all-tests').sourceSets.test.output.classesDirs
			include { FileTreeElement el ->
				if (el.directory) return true
				boolean result = el.path.hashCode() % (gradle.settings.testShardCount) == shardIndex
				if (result) {
					includedTests << el.path
				}
				return result
			}
			doLast {
				logger.lifecycle "Executed $includedTests"
			}
		}
		
		jacocoTestReport {
			enabled = false
		}
	}
}

task jacocoMerge(type: JacocoMerge) {
	(0..gradle.settings.testShardCount-1).each { shardIndex ->
		dependsOn ":test-shard-${shardIndex}:test"
		executionData project(":test-shard-${shardIndex}").tasks['test']
	}
	destinationFile = file("$buildDir/jacoco/jacocoMerge.exec")
	jacocoClasspath = project(":test-shard-0").configurations.jacocoAnt
}

task jacocoTestReport(type: JacocoReport) {
	dependsOn jacocoMerge
	executionData file("$buildDir/jacoco/jacocoMerge.exec")
	jacocoClasspath = project(":test-shard-0").configurations.jacocoAnt
	sourceDirectories = sourceSets.main.java
	classDirectories = sourceSets.main.output
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/jacoco")
		}
	}
}

task generateSources {
	doLast {
		delete fileTree(dir: 'src/main/java/foo', include: 'Util*.java')
		delete fileTree(dir: 'src/test/java/foo', include: 'Test*.java')
		File testTemplate = file('src/template/java/Test.java.template')
		File utilTemplate = file('src/template/java/Util.java.template')
		
		for (int i = 0; i < 100; ++i) {
			String padded = String.format("%03d", i)
			Map tokens = ['i': "$i", 'padded': "$padded"]
			copy {
				from files(testTemplate)
				into 'src/test/java/foo'
				rename '.*', "Test${padded}.java"
				expand tokens
			}
			copy {
				from files(utilTemplate)
				into 'src/main/java/foo'
				rename '.*', "Util${padded}.java"
				expand tokens
			}
		}
	}
}